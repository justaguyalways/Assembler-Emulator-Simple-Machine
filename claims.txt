/*****************************************************************************
TITLE: Claims																												
	
AUTHOR:A.S.Poornash   2101CS01
Declaration of Authorship
This txt file, claims.txt, is part of the mini project of CS209/CS210 at the 
department of Computer Science and Engg, IIT Patna . 
*****************************************************************************/

Files:
==========
*All the files I submitted, asm.cpp and emu.cpp and claims.txt, have my name and student id at the start, along with a declaration of authorship.

The evidence for Assembler and Emulator including the output files from the 6 test examples has also been uploaded. They are test1(3 output files), test2(2 output files), test3(3 output files) , test4/memcpy(memcpy - 3 assembler + 1 emulator output files), test5/algo1(bubblesort - 3 assembler + 1 emulator output files), test6/algo2(perimeter of rectangle - 3 assembler + 1 emulator output files). All the test files have been tested and work properly.

*Both of my c programs did not show any errors and warnings when i compiled it with
gcc -std=c89 -pedantic and gcc -std=c89 -pedantic -W -Wall -Wpointer-arith -Wwrite-strings -Wstrict-prototypes standard  or equilvalent ....or gcc ... or g++

*Two programs are compatible with gcc asm.c -o asm and gcc emu.c -o emu.


=============================
Program format and structure:
=============================
1. The assembler:

    * with two data structures to store respectively labels and mnemonic table with expected operands.
    * uses a single routine for both passes.
    * detects label errors.
    * consistent and sensible formatting with sensible program structure. 
    * sensible variable, function & type names with required comments.
		* advanced listing file.
		* assembles test programs.
    * can also implement and demonstrate the instruction SET.

2. The emulator :

    * with three data structures to store respectively memory, mnemonic table with expected operands and a vector for instructions.
    * loads object file, 
    * by giving the proper flags in the range {1,2,3,4} to execute instructions like "before/after/trace/isa" , the program can produce memory dump before/after execution and also find trace for a code and also a memorydump when required.
    * detects errant programs.


=============================
Testing:
=============================

1. The assembler:

I have tested six examples shown as below. Their results and inferences are as follows -
 

1)
#Input file - test1.asm
#Output - 
a. test1_warning.log 
b. test1.lst 
c. test1.o

2)
#Input file - test2.asm
#Output: 
a. test2.log (containing errors with line numbers)
b. test2_warning.log (conatins warnings)
c. test2.o

3)
#Inpu file  - test3.asm
#Output: 
a. test3.lst 
b. test3_warning.log (conatins warnings)
c. test3.o

4)
#Input file - test4.asm(memcpy)
#Output: 
a. test4.lst 
b. test4.o
c. test4_warning.log (conatins no warnings)

5)
#Input file - Bubble_sort.asm(bubblesort) - test5
#Output: 
a. test5.lst 
b. test5.o
c. test5_warning.log (conatins no warnings)

6)
#Input file - Perimeter_of_rectangle.asm(perimeter of rectangle) - test6
#Output: 
a. test6.lst 
b. test6.o
c. test6_warning.log (conatins no warnings)

2. The emulator:

I have tested three examples shown as bellow. 

The others were tested without any errors detected and produced execution data both on the screen and 
output text file for each example according to the usage instruction. 

After running the bin file given, the trace data are the same as 
the implemented result from my own program.

1)
#Input: ./emu 
enter the file name of the machine code test4.o
Output:There are four options:
1 forprior instruction
2 fortrace
3 forisa
4 forafter instruction execution

Enter your option as 4 
47654 instructions executed
memory dump file is given as test4_memorydumpfile.txt

2)
#Input:./emu 
enter the file name of the machine code test5.o  
There are four options:
1 forprior instruction
2 fortrace
3 forisa
4 forafter instruction execution

after choosing option 4 you get the memory dump as test5_memorydumpfile.txt

after choosing option 2 you get trace as - 
#Output: 

Trace is:
PC=00000001     SP=00800000     A=00001000      B=00000000      ldc     0000000b
PC=00000002     SP=00001000     A=00000000      B=00000000      a2sp    00000f00
PC=00000003     SP=00001000     A=0000000f      B=00000000      ldc     00000004
PC=00000004     SP=00001000     A=0000002a      B=00000000      ldnl    00000100
PC=00000005     SP=00001000     A=00000001      B=0000002a      ldc     00000008
PC=00000006     SP=00001000     A=00000054      B=0000002a      shl     ffffff0a
PC=00000007     SP=00000fff     A=00000054      B=0000002a      adj     00000003
PC=00000008     SP=00000fff     A=0000002a      B=0000002a      stl     00000f00
PC=00000009     SP=00000fff     A=0000000f      B=0000002a      ldc     00000104
PC=0000000a     SP=00000fff     A=0000000c      B=0000002a      ldnl    00000100
PC=0000000b     SP=00000fff     A=00000001      B=0000000c      ldc     00000008
PC=0000000c     SP=00000fff     A=00000018      B=0000000c      shl     00000002
PC=0000000d     SP=00000fff     A=00000054      B=00000018      ldl     00000006
PC=0000000e     SP=00000fff     A=0000006c      B=00000018      add     00000012
PC=0000000f     SP=00000fff     A=0000006c      B=00000018      HALT    0000002a
15 instructions executed


3)
#Input:./emu
enter the file name of the machine code filetest06.o
#output:There are four options:
1 forprior instruction
2 fortrace
3 forisa
4 forafter instruction execution

1440 instructions executed

Enter your option 3

The isa is:
Opcode Mnemonic Operand
	 data     value
0      ldc      value
1      adc      value
2      ldl      offset
4      ldnl     offset
5      stnl     offset
6      add      none
7      sub      none
8      shl      none
9      shr      none
10     adj      value
11     a2sp     none
12     sp2a     none
13     call     offset
14     return   none
15     brz      offset
16     brlz     offset
17     br       offset
18     HALT     none
19     data     value
       SET      value

memory dump file is given as test6_memorydumpfile.txt on entering option 4


